class Solution {
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        vector<vector<int>>ans;
        if(root==NULL)
        return ans;
        queue<TreeNode*>q;
        q.push(root);
        bool lefttoright = true;
        while(!q.empty())
        {
            int size = q.size();
            vector<int>v(size);
            for(int i=0;i<size;i++)
            {
               TreeNode* node = q.front();
               q.pop();
               int index = lefttoright? i:size-1-i;
               v[index] = node->val;
               if(node->left) q.push(node->left);
               if(node->right) q.push(node->right);
            }
            lefttoright = !lefttoright;
            ans.push_back(v);
        }
        return ans;

    }
};

Time Complexity = O(N), where N = no. of Nodes
Space Complexity = O(N), where N = no. of Nodes
