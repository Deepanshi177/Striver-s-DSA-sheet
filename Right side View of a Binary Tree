/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void right_side(TreeNode*root, int level, vector<int>&v)
    {
        if(root==NULL)
        return;
        if(level == v.size())
        {
            v.push_back(root->val);
        }
        right_side(root->right,level+1,v);
        right_side(root->left,level+1,v);
    }
    vector<int> rightSideView(TreeNode* root) {
        vector<int>ans;
        right_side(root,0,ans);
        return ans;
    }
};
-----------------------------------------------------------------------------------------------------------------------------------

// Explanation of the above code


Intuition:-

In case of Right side view, apply recursive level order traversal and traverse the nodes as (ROOT->RIGHT->LEFT).

Approach:-

1. Use a vector to store the nodes visible in right side view.
2. If the size of the vector is equal to the level, then push the node into the vector, otherwise do not push it.
3. recursively check for other nodes.

Complexity:-

Time complexity:
O(N), where N = no. of the nodes, as each node is visited only once.

Space complexity:
O(N), where N = no. of the nodes.
It represents the maximum height of the binary tree, in the case of skewed tree, maximum height = N.
