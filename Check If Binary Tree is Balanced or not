//Brute Force Approach:-
/*For a Balanced Binary Tree, Check left subtree height and right subtree height for 
  every node present in the tree. 
  Hence, traverse the tree recursively and calculate the height of left and right subtree from 
  every node, and whenever the condition of Balanced tree violates, simply return false.
  
  Time Complexity = O(N*N) 
  Space Complexity = O(N)
 */
--------------------------------------------------------------------------------------------------------------------------- 
//Optimized Recursive Approach

class Solution {
public:
    int height(TreeNode* node)
    {
        if(node == NULL)
        return 0;
        int x = height(node->left);
        if(x==-1) return -1;
        int y = height(node->right);
        if(y==-1) return -1;
        if(abs(x-y)>1)return -1;
        return 1 + max(x,y);
    }
    bool isBalanced(TreeNode* root) {
        return height(root)!=-1;
    }
};

Time Complexity = O(N)
Space Complexity = O(N)
