//HASHMAP
bool cycleDetect(node* head) {
    unordered_set<node*> hashTable;
    while(head != NULL) {
        if(hashTable.find(head) != hashTable.end()) return true;
        hashTable.insert(head);
        head = head->next;
    }
    return false;
}

Time complexity = O(N), where N = no. of the nodes in the Linked List
Time complexity = O(N), where N = no. of the nodes in the Linked List

-------------------------------------------------------------------------------------------------------------

//SLOW AND FAST POINTER

class Solution
{
    public:
    //Function to check if the linked list has a loop.
    bool detectLoop(Node* head)
    {
        Node* slow = head;
        Node* fast = head;
        while(fast && fast->next)
        {
            fast = fast->next->next;
            slow = slow->next;
            if(slow==fast)
            return true;
        }
        return false;
    }
};

Time Complexity = O(N), where N = no. of the nodes.
Space Complexity = O(1)

