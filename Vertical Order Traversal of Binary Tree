/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
 
class Solution {
public:
    vector<vector<int>> verticalTraversal(TreeNode* root) {
        vector<vector<int>>ans;
        if(root==NULL)
        return ans;
        map<int,map<int,multiset<int>>>nodes;
        queue<pair<TreeNode*,pair<int,int>>>todo;
        todo.push({root,{0,0}});
        while(!todo.empty())
        {
            auto p = todo.front();
            todo.pop();
            TreeNode* temp = p.first;
            int x = p.second.first;
            int y = p.second.second;
            nodes[x][y].insert(temp->val);
            if(temp->left!=NULL)
            {
                todo.push({temp->left,{x-1,y+1}});
            }
            if(temp->right!=NULL)
            {
                todo.push({temp->right,{x+1,y+1}});
            }
        }
        for(auto it:nodes)
        {
            vector<int>col;
            for(auto q:it.second)
            {
                col.insert(col.end(),q.second.begin(),q.second.end());
            }
            ans.push_back(col);
        }
        return ans;
    }
};

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Time Complexity = O(N*logN*logN*logN)
Space Complexity = O(N)
